{
 "cells": [
  {
   "id": "cebbc6e8-0a99-48b3-8fac-6e4708959cdf",
   "metadata": {},
   "source": [
    "import streamlit as st\n",
    "import joblib\n",
    "import pandas as pd\n",
    "\n",
    "# Load model and label encoders\n",
    "model = joblib.load('insurance_fraud_model.pkl')\n",
    "label_encoders = joblib.load('label_encoders.joblib')\n",
    "\n",
    "categorical_cols = list(label_encoders.keys())\n",
    "\n",
    "# --- UI Form ---\n",
    "st.title(\"Insurance Fraud Detection\")\n",
    "\n",
    "policy_csl = st.selectbox(\"Policy CSL\", [\"100/300\", \"250/500\", \"500/1000\"])\n",
    "insured_sex = st.selectbox(\"Gender\", [\"MALE\", \"FEMALE\"])\n",
    "incident_type = st.selectbox(\"Incident Type\", [\n",
    "    \"Multi-vehicle Collision\", \"Parked Car\", \"Single Vehicle Collision\", \"Vehicle Theft\"\n",
    "])\n",
    "collision_type = st.selectbox(\"Collision Type\", [\n",
    "    \"Front Collision\", \"NA\", \"Rear Collision\", \"Side Collision\"\n",
    "])\n",
    "incident_severity = st.selectbox(\"Incident Severity\", [\n",
    "    \"Major Damage\", \"Minor Damage\", \"Total Loss\", \"Trivial Damage\"\n",
    "])\n",
    "authorities_contacted = st.selectbox(\"Authorities Contacted\", [\n",
    "    \"Ambulance\", \"Fire\", \"NA\", \"Other\", \"Police\"\n",
    "])\n",
    "property_damage = st.selectbox(\"Property Damage\", [\"NA\", \"NO\", \"YES\"])\n",
    "police_report_available = st.selectbox(\"Police Report Available\", [\"NA\", \"NO\", \"YES\"])\n",
    "\n",
    "if st.button(\"Predict Fraud\"):\n",
    "    # Prepare raw input dictionary (categorical strings)\n",
    "    raw_input = {\n",
    "        'policy_csl': policy_csl,\n",
    "        'insured_sex': insured_sex,\n",
    "        'incident_type': incident_type,\n",
    "        'collision_type': collision_type,\n",
    "        'incident_severity': incident_severity,\n",
    "        'authorities_contacted': authorities_contacted,\n",
    "        'property_damage': property_damage,\n",
    "        'police_report_available': police_report_available\n",
    "    }\n",
    "\n",
    "    # Encode input for prediction\n",
    "    input_encoded = {}\n",
    "    for col in categorical_cols:\n",
    "        input_encoded[col] = label_encoders[col].transform([raw_input[col]])[0]\n",
    "\n",
    "    # Convert to DataFrame\n",
    "    input_df = pd.DataFrame([input_encoded])\n",
    "\n",
    "    # Predict\n",
    "    prediction = model.predict(input_df)[0]\n",
    "\n",
    "    # Inverse transform prediction\n",
    "    prediction_label = label_encoders['fraud_reported'].inverse_transform([prediction])[0]\n",
    "\n",
    "    # Display result\n",
    "    st.success(f\"Fraud Prediction: {prediction_label}\")\n",
    "\n",
    "    # Show encoded and original input\n",
    "    st.subheader(\"Input Summary:\")\n",
    "    st.write(\"Categorical Input:\")\n",
    "    for col in categorical_cols:\n",
    "        st.write(f\"{col}: {raw_input[col]} ‚ûù Encoded as {input_encoded[col]}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
